# ðŸŽ¯ Clean CI Configuration for Sprint 4 Database Integration

name: Python application

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'README*'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'README*'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13.5
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.5"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare test environment
        run: |
          # Set testing environment variables
          export TESTING=true
          export PYTHONDONTWRITEBYTECODE=1
          # Suppress ResourceWarnings for cleaner CI output
          export PYTHONWARNINGS="ignore:unclosed:ResourceWarning"
          # Create necessary directories
          mkdir -p app/data
          # Clean up any existing files
          rm -f tasks.db app/data/tasks.json
          echo "âœ… Test environment prepared"

      - name: Ensure clean database file
        run: |
          rm -f tasks.db

      - name: Start Flask server in background
        run: |
          export TESTING=true
          cd $GITHUB_WORKSPACE
          nohup python -m app.main --no-debug --no-reload &
          sleep 3

      - name: Wait for Flask server to be ready
        run: |
          for i in {1..20}; do
            if curl -s http://localhost:5000/api/health > /dev/null; then
              echo "Flask server is up!"
              break
            fi
            echo "Waiting for Flask server... ($i/20)"
            sleep 1
          done
          # Final check
          if curl -s http://localhost:5000/api/health > /dev/null; then
            echo "Server health check passed"
          else
            echo "Server health check failed"
            exit 1
          fi

      - name: Run all tests with coverage
        run: |
          # Set environment variables for testing
          export TESTING=true
          export PYTHONDONTWRITEBYTECODE=1
          export PYTHONWARNINGS="ignore:unclosed:ResourceWarning"
          # Run all tests with coverage tracking and output results to XML
          pytest --cov=app --cov-report=term-missing --cov-report=html --junitxml=results.xml
        env:
          TESTING: true
          PYTHONDONTWRITEBYTECODE: 1
          PYTHONWARNINGS: "ignore:unclosed:ResourceWarning"