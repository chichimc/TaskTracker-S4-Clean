# üë∑‚Äç‚ôÄÔ∏è GitHub Actions Workflow for Python Testing and Code Coverage

# üü° This workflow will run automatically:
# - when code is pushed to the "main" branch
# - when a pull request is opened against the "main" branch
# - unless the change is only to ignored files like markdown, docs, or README

name: Python application

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'           # Skip running CI if only markdown files change
      - 'docs/**'         # Skip if only docs are updated
      - '**.rst'          # Skip reStructuredText files
      - 'LICENSE'         # Skip license updates
      - '.gitignore'      # Skip gitignore-only changes
      - 'README*'         # Skip README edits
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '**.rst'
      - 'LICENSE'
      - '.gitignore'
      - 'README*'

jobs:
  build:  # üî® Job name
    runs-on: ubuntu-latest  # üñ•Ô∏è This job will run in a virtual machine with Ubuntu

    steps:
      # Step 1: Get your code
      - name: Checkout Repository
        uses: actions/checkout@v4
      # üìÇ This downloads your repository's files into the CI environment

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.5"  # Python version must match your local dev environment

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Upgrade pip
          pip install -r requirements.txt      # Install all Python packages listed in requirements.txt


      # Step 4: Start Flask server in background
      - name: Start Flask server in background
        run: |
          nohup python -m app.main &

      # Step 5: Wait for Flask server to be ready (health check loop)
      - name: Wait for Flask server to be ready
        run: |
          for i in {1..20}; do
            if curl -s http://localhost:5000/api/tasks/health > /dev/null; then
              echo "Flask server is up!"
              break
            fi
            echo "Waiting for Flask server..."
            sleep 1
          done

      # Step 6: Run tests with coverage tracking
      - name: Run tests with coverage
        run: |
          pytest --cov=app --cov-report=term-missing
          #  This runs pytest and measures how much of the 'app' folder is tested
          # --cov=app ‚Üí tracks coverage in the 'app' directory
          # --cov-report=term-missing ‚Üí shows which lines were not tested

      # (Optional) Step 5: Enforce a minimum test coverage percentage
      # - name: Enforce minimum coverage
      #   run: |
      #     coverage report --fail-under=80
      #     # ‚ùå This will fail the build if total coverage is below 80%

      # (Optional) Step 6: Save the HTML version of the coverage report as an artifact
      # - name: Upload coverage HTML report
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: coverage-html
      #     path: htmlcov/
      #     # üìÅ This allows you to download and view the full HTML coverage report after CI runs